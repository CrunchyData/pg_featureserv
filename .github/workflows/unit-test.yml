# This workflow will install Go dependencies, run tests for 4 versions of Go
# For more information see: https://support.github.com/features/actions

name: Unit tests

on:
  pull_request:
    paths:
    - ".github/workflows/*.yml"
    - "**/*.go"
    - "**/go.mod"
    - "**/go.sum"

permissions:
  contents: read
  pull-requests: write

env:
  POSTGRES_VERSION: "12"
  POSTGIS_VERSION: "3.0"
  POSTGRES_DB: pg_featureserv
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres

jobs:
  go-test:
    name: Run go unit tests
    strategy:
      matrix:
        go-version: ["1.13", "1.16", "1.18", "1.19"]
    runs-on: ubuntu-latest

    services:
      postgis:
        image: postgis/postgis # unable to handle var in image name. Was: "postgis/postgis:${POSTGRES_VERSION}-${POSTGIS_VERSION}-alpine"
        env:
          POSTGRES_DB: pg_featureserv # mandatory duplicate
          POSTGRES_USER: postgres # mandatory duplicate
          POSTGRES_PASSWORD: postgres # mandatory duplicate
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - name: 'Install Go'
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}

      - uses: actions/checkout@v3

      - name: Install test dependencies
        run: |
            go get github.com/boumenot/gocover-cobertura

      - name: Install project dependencies
        run: go build

      - name: Run test
        run: |
          # run test:
          export DATABASE_URL="postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@localhost/${POSTGRES_DB}"
          PKGS=$(go list ./... | grep -v /vendor/)
          DEPS=$(go list ./... | grep -v vendor | grep -v test | xargs | sed 's/ /,/g')
          go test ${PKGS} -v \
            -coverprofile=coverage_${{ matrix.go-version }}.out \
            -covermode=count \
            -coverpkg ${DEPS} 2>&1

      - name: Generate code coverage report
        run: |
          go run github.com/boumenot/gocover-cobertura < coverage_${{ matrix.go-version }}.out > coverage-unit_${{ matrix.go-version }}.xml

      - name: compute valid coverage total
        run: |
          go tool cover -func=coverage_${{ matrix.go-version }}.out

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        if: matrix.go-version == '1.19'
        with:
          # will generate code-coverage-results.md
          filename: coverage-unit_*.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '60 80'

      - name: Add coverage comment to PR
        uses: marocchino/sticky-pull-request-comment@v2
        if: matrix.go-version == '1.19' && github.event_name == 'pull_request'
        with:
          path: code-coverage-results.md

      # TODO: retrieve and publish test results
      # - name: Upload unit test results
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: go-test-results
      #     path: unit-tests_*.xml

      - name: Upload coverage results
        uses: actions/upload-artifact@v3
        with:
          name: go-coverage-results
          path: coverage-unit_*.xml
